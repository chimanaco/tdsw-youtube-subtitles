0:00:00.000,0:00:08.797
[音楽]

0:00:10.153,0:00:13.778
みなさんこんにちは
TDSW YouTubeチャンネルです

0:00:14.192,0:00:20.068
TouchDesignerではじめるGLSL第2回になります
よろしくお願いします

0:00:20.240,0:00:24.834
今回はですね
Coordinates、座標系についての説明をして

0:00:24.859,0:00:30.232
最終的には今ご覧いただいているようなかっこいいものを
ちょっと作ってみたいと思います

0:00:35.114,0:00:40.395
GLSL
これを使います

0:00:40.420,0:00:45.531
GLSLの座標系なんですけども
いわゆる右手座標系というやつで

0:00:45.556,0:00:51.806
x は右方向に行くと+
yは上方向に行くほど+という風になっています

0:00:52.604,0:00:56.518
0から1の値をこの中で扱うことになっていて

0:00:58.088,0:01:01.439
左下がx =0とy=0

0:01:01.970,0:01:05.980
右上がx =1 y=1になります

0:01:06.220,0:01:11.089
ついででに言うと左上が
x =0 y=1

0:01:11.114,0:01:15.913
右下がx=1 y=0と
こういう風になっています

0:01:16.632,0:01:23.678
これらをですね簡単にGLSLで色でビジュアライズできるので
ちょっと見てみたいと思います

0:01:31.970,0:01:37.330
外部エディタでGLSLを開きました

0:01:37.354,0:01:39.673
ここに置いて並べてみたいと思います

0:01:40.710,0:01:47.388
ここで使うのがですねこのvUVという変数なんですけども
これは何かというと

0:01:47.413,0:01:54.222
この中に今これが256x256のテクスチャ
ピクセルがあるんですけど

0:01:54.247,0:01:58.155
全ての座標の情報が入っています

0:02:04.010,0:02:12.666
基本的にこれTouchDesignerの
GLSL TOPでこの関数は使えることになっています

0:02:12.950,0:02:16.403
Fragment ShaderとVertex Shaderを組み合わせる時には

0:02:16.428,0:02:22.149
自分でVertex Shaderの方から
変数を送ってあげないといけないのですけども

0:02:22.150,0:02:25.170
この場合は特にそこは考えなくて大丈夫です

0:02:28.935,0:02:31.580
後ろにstとついているんですけども

0:02:32.060,0:02:39.350
これは何かというとSwizzleと呼ばれるもので
こういうvectorとかの値を表現するのに使われています

0:02:39.777,0:02:47.759
stの他にはですね
rgbaとかxyzwなんていうのがあります

0:02:47.760,0:02:52.955
例えばですね
このvec4 colorていうのが

0:02:52.980,0:02:59.575
vec4(1.0)なのでこの中に4つrgbaと
全部1が入っている状態になるんですね

0:02:59.600,0:03:02.302
これを取り出すときに

0:03:04.396,0:03:07.076
float例えばrとかして

0:03:07.101,0:03:12.270
color.r
こんな風にすると

0:03:12.810,0:03:16.054
一つ目のこれが取れるようになっています

0:03:16.310,0:03:23.590
他にはですね
g  もちろんこういうこともできますし

0:03:23.703,0:03:29.794
こういう風になっているとrg...間違っていますね
rgbとこういうことができますね

0:03:29.819,0:03:35.352
他にちょっと面白い使い方があって

0:03:35.512,0:03:41.738
例えばvec4 color2とかしてみましょうか

0:03:43.955,0:03:48.285
color.rbgaとかすると

0:03:48.316,0:03:53.535
このbとgの値がひっくり返って使うことができます

0:03:55.409,0:03:59.565
このrgbaっていうのと

0:03:59.590,0:04:07.681
他にもxyzwっていうのと

0:04:08.149,0:04:12.583
もう一つこのvUV で使われている

0:04:12.607,0:04:14.719
何でしたっけ

0:04:19.317,0:04:25.500
stpqですね
stpqというのがあります

0:04:25.705,0:04:34.026
このテクスチャーの時に使うこのSwizzleとしては
このstっていうのが定番というかこういう使い方をするので

0:04:34.051,0:04:39.440
他の人のサンプルコードとかを見た時に使われていると思います

0:04:40.340,0:04:49.278
実際色にはrgbであったり座標系にxyzを使うのは
わかりやすいからだと思うんですけど

0:04:49.302,0:04:55.132
このstの代わりにxyとかって入れても同じ結果が出ます

0:04:56.062,0:05:03.167
けどちょっとわかりにくくなってしまうので
色だとrgbaを使ったり座標でxyzを使ったり

0:05:03.191,0:05:08.640
テクスチャの時にはstを使うという風にしておくといいかなと思います

0:05:11.615,0:05:18.119
では、ちょっとこれは置いといて
実際にコードを書いていきたいと思います

0:05:22.500,0:05:30.219
まずvUV.stという風に書いて
0.0, 0.0, 1.0と

0:05:30.286,0:05:33.818
こういう風に書きます
あ、何かおかしいですね

0:05:33.851,0:05:39.265
これですね
これはstじゃなくてvUV.sになります

0:05:39.530,0:05:47.000
こうするとですね
このsが基本的にx方向でtがy方向ということになりますが

0:05:47.025,0:05:54.654
見ての通りですねここには0から1の情報が入っているんですけども

0:05:54.865,0:06:02.329
他のgとbは0なのでこの赤がどういう値が
入っているかというのがここにビジュアライズされています

0:06:02.445,0:06:08.416
黒っぽいのから明るい赤になるまで
0から1の情報が

0:06:13.310,0:06:21.060
xの値に応じて色がついていると
こういうことになります

0:06:23.500,0:06:29.375
ちょっとこれをパッと見ただけでよく何やってるのかわかんない
という方もいるかもしれないので

0:06:29.400,0:06:35.330
これをTouchDesignerのインスタンシングで
ちょっと表現していてみたいと思います

0:06:43.030,0:06:49.890
何をやっているかというと
一回ちょっと大きくしましょう か

0:06:51.907,0:06:59.508
グリッドがあってこのグリッドは20x20で
ちょっとそのShaderでやっているやつより小さいんですけれども

0:07:00.422,0:07:03.168
20x20のグリッドがあって

0:07:03.192,0:07:12.530
これをデフォルトだと-0.5から0.5のとこにいるのを
0から1のところに配置しています

0:07:12.555,0:07:18.307
0で1、こっちも1ですね
ここが1,1ということにります

0:07:19.699,0:07:27.277
このSOPをCHOPにして
Instancingに使っています

0:07:29.396,0:07:32.742
ちっこいボックスがいっぱいある
という風になっています

0:07:32.767,0:07:39.591
これをちょっと開いてみるとこんな感じですね
20x20のボックスが並んでいるのが見えると思います

0:07:42.036,0:07:45.575
ここでやりたいことは

0:07:45.872,0:07:53.132
Geometryで今Instancingでこのポジションを全部
tをtranslateに配置しているんですね

0:07:53.163,0:07:58.462
txはこっちの流れtyはこっちの流れ
という風になっているんですけど

0:07:58.729,0:08:01.442
ここに色情報を追加してみたいと思います

0:08:02.942,0:08:09.380
rgbaとあるのでrにtx
こちらを入れて

0:08:09.470,0:08:15.868
他は全部0を入れたいので
そっちに変化のないzを入れていきます

0:08:16.090,0:08:20.363
こんな感じですね
こうするとわかりやすいと思うんですけど

0:08:20.388,0:08:22.738
黒から赤に変化していく

0:08:23.991,0:08:31.619
これだと200ピクセルあって
これがGLSLだと全て同時に処理をされると

0:08:31.644,0:08:38.620
1フレームにこのピクセル全てが処理される
という風になっています

0:08:46.481,0:08:52.534
このコードだけで全てのピクセルを同時に動かす
というちょっと不思議な感じではあるんですけども

0:08:52.558,0:08:57.700
そういう言語だということです

0:08:57.730,0:09:00.255
今x方向をやったんですけども

0:09:00.380,0:09:07.030
これを今度はGreenで表現してみたいと思います
y座標ですね

0:09:07.132,0:09:11.728
0にしてここにtを置くと

0:09:11.753,0:09:16.570
今度はこの下から上で0から1に増えていくので

0:09:16.594,0:09:21.411
このtのグリーンの値が入っているということですね

0:09:21.482,0:09:27.505
これはどういうことかというとですね
こちらのチョップを見れば多分わかりやすいと思うんですが

0:09:27.529,0:09:29.528
さっきのこれ x もそうですね

0:09:29.529,0:09:37.260
ここで今回はyなんですけども
20個ずつちょっとずつ増えていくんですね

0:09:52.718,0:09:56.343
今度はtzでty

0:09:56.368,0:10:01.989
xには全て0が入って
yだけ数字を持っているという状態です

0:10:01.990,0:10:06.458
こうなっていると
ここでこうなっている時に

0:10:06.482,0:10:10.949
要するに下から黒から緑になっています

0:10:12.850,0:10:16.951
ここではこの数値は
ちょっとずつ段々で増えてっているですよね

0:10:16.976,0:10:25.584
ここが0で0が20個並んでいてちょっと緑に近くなっているのがここ

0:10:25.608,0:10:27.501
段々これが増えていって

0:10:27.526,0:10:34.750
最終的にはこのグリーン1という数値になります
この一番上ですね

0:10:44.849,0:10:49.779
これ縦横別にやるとこういう感じなんですけど

0:10:53.080,0:10:58.527
これにx とyを両方入れてみたいと思います

0:10:58.552,0:11:06.940
これに加えrの情報を入れます
そうするとこういうグラデーションができるんですね

0:11:07.145,0:11:11.577
x 方向だと赤の0から1という風になってて

0:11:11.639,0:11:17.279
今度はy方向も0から1というのを持っています

0:11:17.497,0:11:19.731
ここになると黄色になるんですけど

0:11:22.325,0:11:29.360
r とgが1の状態
rgb 1, 1, 0の状態がここにあることになります

0:11:29.999,0:11:35.680
これも同じようにこのインスタンスでも表現できて

0:11:36.251,0:11:41.990
この場合はもうtxを入れてしまうと
こういうものが作れます

0:11:53.680,0:11:56.250
これで一応

0:11:59.763,0:12:07.126
このFragment Shaderには0から1が入っているというのが
わかっていただけたのではないかと思います

0:12:12.384,0:12:17.605
今度はですね
この0から1へと変化する値を使用して

0:12:17.667,0:12:23.138
先ほどお見せした
ストライプのイメージを作っていきたいと思います

0:12:23.480,0:12:30.070
いろいろやり方はあると思うんですが
今回はsin関数というのを使用します

0:12:32.060,0:12:36.467
ちょっと別に作ります
GLSL

0:12:42.125,0:12:49.000
sin関数と言うと三角関数とかで
皆さん思い出されると思うんですけども

0:12:51.388,0:12:56.348
こんな感じで
これいわゆるsin waveなんですけども

0:12:56.373,0:13:03.944
入って来る値によって-1から1まで変化していくと
こう滑らかに変化していくと こういうのがsin waveですね

0:13:15.485,0:13:22.289
この値を使って色を表現していこう
というわけなんですけども

0:13:24.907,0:13:27.419
ちょっとやってみたいと思います

0:13:40.645,0:13:48.286
今度はsinと打って
先程使ったx座標を使ってみたいと思います

0:13:48.311,0:13:52.001
vUV.stと
こういう風に入れてみる

0:13:52.026,0:13:53.351
あ、壊れましたね

0:13:53.391,0:13:57.976
stじゃなくてsですねこういう感じです
あ、そうか

0:13:58.001,0:14:05.956
これだと透明が入ってしまうので
透明度1で固定しようと思います

0:14:06.003,0:14:13.950
そのために
このcolorを1回vec3にして

0:14:22.579,0:14:25.329
これでいけるかな
いけないですね

0:14:29.438,0:14:30.657
こういう風になりますね

0:14:31.274,0:14:36.859
このTDOutputSwizzleはvec4の値を取るので

0:14:36.860,0:14:45.371
vec4で作ってここにvec3のカラー情報が入っています

0:14:45.395,0:14:52.239
rgb が入ってるんですね
カラーは主rgb全部同じ情報が入っていて

0:14:52.240,0:14:57.966
アルファはずっと1で固定
ということになっています

0:14:58.177,0:15:08.031
rgb全部一緒なので基本的に
黒から白のグレースケールの画像になっています

0:15:09.657,0:15:14.341
これはちょっと消してもいいので
消してしまいましょう

0:15:14.520,0:15:19.999
このvUV.s っていうのには基本的に0から1の数字が入ってるんですね

0:15:20.319,0:15:27.834
これが今0から1のsin関数を実行した
結果が入ってるわけなんですけど

0:15:30.584,0:15:37.592
これをいい感じにボーダーにしていくために
数値を計算していこうと思います

0:15:38.248,0:15:44.180
ここでsin関数を計算するCalculatorを見つけてきました

0:15:44.205,0:15:49.415
ここに入る値はラジアンで入れて計算するので

0:15:49.440,0:15:53.695
例えばsin0とかすると0が入ってきます

0:15:53.720,0:15:59.308
この0というのは今この左端の状態ですね
ここを0だと思ってください

0:15:59.333,0:16:01.691
ここに0から1までが入っているわけなので

0:16:01.716,0:16:09.170
これを0とすると
単純にここは0から0.84の値が入ることになります

0:16:12.091,0:16:21.833
例えば2とかにして
0.90929743という数字が入ることになります

0:16:22.235,0:16:26.354
例えばこういう数字を入れたいという風に思った時は

0:16:29.903,0:16:36.730
xを単純に2倍すると
こういう風にすると

0:16:36.754,0:16:42.201
0から0.9までの値が入っていることになります

0:16:43.186,0:16:50.922
このままだとちょっとよくわからないので
ここに3.14という数字を例えば入れたりすると

0:17:04.958,0:17:14.809
これで数字を入れると基本的にこう大体0から1に行って
もう1回0に戻るという風な数字が取れました

0:17:14.880,0:17:16.622
ここの間ができるわけですね

0:17:16.647,0:17:22.413
これで言うと

0:17:22.438,0:17:29.284
ここからここの数値が入って
0から1でここまでが来たという状態になります

0:17:30.221,0:17:40.499
さらにここにπの2倍の6.28みたいな数字入れると

0:17:40.500,0:17:43.312
ここから0から1まで来て

0:17:45.046,0:17:53.009
1から0、-1、で0
ここまでの数字が入っていることになります

0:17:57.474,0:18:07.195
GLSLでは0以下の数字は全て0と同じようなことになってて
色に出せないんですね

0:18:07.220,0:18:13.001
そこは全部黒になっているので0から1、1から0まで行って

0:18:13.026,0:18:20.705
そこから0から-1まで行ってまた0に戻ってくるというのがここに入っています

0:18:22.837,0:18:28.509
今度はここの数字をさらに増やしていくと

0:18:29.779,0:18:37.966
こう2周するとこの波が2回ある感じですね
こんな感じになります

0:18:39.333,0:18:45.270
別にこのπの値を使わなくても良くてここに10とか入れれば

0:18:45.294,0:18:47.700
あ、ちょっと戻っちゃいましたね

0:18:47.825,0:18:53.026
ここに20とか入れると

0:18:54.780,0:18:58.250
波がどんどん増えていくと
こういうことになります

0:19:02.336,0:19:08.937
どんな数字でもいっぱい入れれば入れるほどどんどん
周期が速くなっていくと

0:19:08.962,0:19:15.009
これと一緒で どんどん
こんな感じですね

0:19:15.010,0:19:22.450
0から1、-1と
表現が繰り返されるわけですね

0:19:22.727,0:19:27.971
ここ見てわかると思うんですけど
この白い部分よりどうしても黒い部分の方が大きくなるんですね

0:19:27.996,0:19:39.634
それはこの基本的に1から-1の周期の繰り返しなので
0から-1まで行って-1から0までの部分は全部真っ黒になるので

0:19:39.659,0:19:44.921
黒の部分の方が多いことになり ます

0:19:44.945,0:19:50.206
ここに適当な数字を入れておきます

0:19:50.231,0:19:53.686
このぐらいのボーダーがかっこいいんじゃないかと思って

0:19:57.457,0:20:04.488
これでもなかなかいいと思うんですけど
ちょっと今度はアニメーションというかこれを動かしてみたいと思います

0:20:05.457,0:20:10.355
GLSL単体ですと、単体というかこれ1個だけのものだと

0:20:10.379,0:20:16.732
前のフレームとか前のフレームの変数とかそういうのを保存しておけないのですけども

0:20:20.303,0:20:26.898
ここでは動きをつけるために
時間という変数をこれに与えていきたいと思います

0:20:28.226,0:20:34.767
こういう時にはですね
そのCPU側からGPU、GLSLに変数を送る時にですね

0:20:34.792,0:20:38.308
uniform変数というのを使います

0:20:38.333,0:20:44.921
これはまずコード内でuniform変数を宣言します

0:20:45.233,0:20:49.099
これがすでにサンプルにあるこいつですね

0:20:50.100,0:20:54.631
uniformというのを頭に付けて
ここは型ですね

0:20:54.656,0:21:00.289
今回時間を使うのでfloatのままでよくて

0:21:01.100,0:21:05.125
例えばこんな風な変数を作ります

0:21:05.150,0:21:11.910
何でもいいんですけど
これ僕の自分の決まりで

0:21:12.269,0:21:19.169
uniformのtimeという変数を作ったということになります

0:21:19.194,0:21:24.915
例えばShaderToyだとiGlobalTimeになってたり

0:21:24.940,0:21:32.682
そのサービスというかソフトウェアとか
お作法というかあるんですけど

0:21:32.707,0:21:38.395
基本何でも大丈夫なので
自分で使いやすいものを使ってください

0:21:38.420,0:21:44.460
僕は今こういう風に使っています

0:21:44.480,0:21:48.117
今度はこの値をどうやって持ってくるか
ということなんですけども

0:21:51.690,0:21:54.926
ここに手動でこう書いていくことになるんですが

0:21:55.012,0:21:57.772
便利な機能があって…

0:21:57.797,0:21:59.706
1回セーブしておきます

0:21:59.731,0:22:04.194
Load Uniform Nameっていうのを押すと
ここに自動的に入るようになります

0:22:04.219,0:22:06.397
ここで宣言しているものがですね

0:22:06.422,0:22:09.674
ここを一回クリックすると

0:22:09.699,0:22:14.731
あ、入ってない
何か間違ってますかね

0:22:14.755,0:22:22.600
まぁいいやちょっと入っていないので
手動でやっていきたいとおもいます

0:22:22.855,0:22:27.995
ここにuTimeという風に入れて
これがUniform nameでこの名前と一致させるわけですね

0:22:32.480,0:22:37.373
見ての通り4つあるんですけども
vec4としても使えるんですが

0:22:37.398,0:22:42.437
この最初の1個に入れてfloatという形で使うこともできます

0:22:44.741,0:22:54.977
ここにいつものabsTime.frame
こういうのを入れたりします

0:22:58.480,0:23:06.834
ここでこのvalueが入ったので
この値がGLSLの中で使えるようになります

0:23:06.859,0:23:12.452
例えば+で置いてみると
こうアニメーションが走るわけですね

0:23:13.898,0:23:18.694
ちょっと速いなと思ったので
こういう風にします

0:23:18.719,0:23:24.164
どういうことが起こっているかっていうと基本的に
この波が動いているというような形になります

0:23:26.220,0:23:35.673
これはこのsinに対しこういう値が入った時にこういう波ができる
ということなんですけども

0:23:35.800,0:23:39.471
こう動かしている
こういうイメージですね

0:23:47.059,0:23:55.439
もちろんこれはですね
今色は横でやっているんですが

0:23:55.440,0:24:00.779
これをこう縦にすることも簡単にできます

0:24:02.192,0:24:08.929
このスピードを変えれば
アニメーションも速くなりますし

0:24:11.016,0:24:18.612
ここで数値を変えれば周期も変わる
という風になっています

0:24:32.659,0:24:43.301
今回はですね
TouchDesignerでGLSLの座標系をみんなで学んで

0:24:44.491,0:24:47.545
ちょっとしたアニメーションを作ってみました

0:24:49.076,0:24:55.340
次回からはまた
もうちょっと複雑なことをしていければなと思います

0:25:00.740,0:25:08.734
TDSWではYouTubeチュートリアルの他に
毎月2回程度週末にライブ配信ワークショップを行っています

0:25:08.759,0:25:16.719
チュートリアルでTDSWに興味を持っていただいた方
ぜひライブ配信ワークショップにも遊びに来てください

0:25:16.720,0:25:19.845
またTDSWはPatreonを利用しています

0:25:19.870,0:25:24.161
現在YouTube作成支援プラン、ワークショップ動画見放題プラン

0:25:24.186,0:25:30.908
ワークショップ動画及びライブ配信動画見放題プランの3つのプランがあります

0:25:30.909,0:25:36.997
単体でワークショップに参加されるよりお得になっておりますので
ご検討いただければ幸いです

0:25:37.022,0:25:42.431
概要欄にリンクを置いておきますのでぜひチェックしてみてください

0:25:42.456,0:25:47.288
ご視聴ありがとうございました
よかったらチャンネル登録よろしくお願いいたします

0:25:47.313,0:25:48.966
ではまた

0:25:50.526,0:26:05.890
[音楽]