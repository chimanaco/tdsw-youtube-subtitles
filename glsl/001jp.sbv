0:00:10.560,0:00:15.018
みなさんこんにちはTDSW Youtubeチャンネルです

0:00:15.042,0:00:19.500
今回からTouchDesignerではじめるGLSLと題しまして

0:00:19.500,0:00:25.140
GLSLについてお話していきたいと思います
よろしくお願いします

0:00:25.140,0:00:29.023
まずはじめにGLSLって何？
ということなんですけども

0:00:29.047,0:00:33.680
GLSLはOpenGL Shading Languageの略で

0:00:33.980,0:00:41.200
この中でOpenGLというのはOpen Graphics Libraryといって
3Dグラフィックスを扱うライブラリのことです

0:00:41.200,0:00:45.301
最後にLanguageとあるようにプログラミング言語になります

0:00:45.325,0:00:49.040
Shaderっていう言葉もよく耳にされると思うんですけども

0:00:49.040,0:00:56.880
Shaderが何かということについて一言で言い表しているブログを
見つけたのでそちらを見てみようと思います

0:00:56.880,0:01:04.179
こちらの渋谷ほとどぎす通信さんの
「シェーダ」とは何なのか、を自分の言葉でまとめてみる

0:01:04.203,0:01:07.653
ということで見ていくと、こちらにあります

0:01:07.677,0:01:14.039
3Dオブジェクトをディスプレイに映し出すためのプログラム
とこちらでは定義されています

0:01:14.063,0:01:20.080
これがどういうことか僕もちょっと図を書いてみたので
こちらをご覧ください

0:01:20.080,0:01:24.562
3Dオブジェクトがあって何かの処理が起こって

0:01:24.586,0:01:30.450
最終的にこのディスプレイに3Dオブジェクトが表示されるということであります

0:01:30.450,0:01:38.420
これを3DCGの世界でグラフィックスパイプラインとか
レンダリングパイプラインとかそういう言い方をするんですけど

0:01:38.420,0:01:45.430
それがOpenGLの場合なんですけど

0:01:45.590,0:01:51.210
Shaderがこの中で動いているということになります

0:01:51.210,0:01:58.580
そのShaderの中にShader stageと呼ばれるものがあって
いくつかの処理がこういう風にあるわけですね

0:01:58.650,0:02:06.258
その中でいくつかプログラマーが実際にコードを書ける場所があります

0:02:06.282,0:02:13.493
3Dのオブジェクトは三角形の面でできているので
頂点がすごいたくさんあるわけです

0:02:13.517,0:02:18.200
まずその頂点を処理するための
Vertex Shaderというのがあって

0:02:18.200,0:02:24.023
もう1つFragment Shaderと言う
ピクセルを処理するShaderがあります

0:02:24.048,0:02:29.573
この2つが基本的にメインで書くShaderになります

0:02:29.597,0:02:31.410
その他にもですね

0:02:31.410,0:02:37.670
Geometry Shaderという
Primitiveの増減や変換ができるShaderと

0:02:37.670,0:02:40.328
Compute Shaderというものがあって

0:02:40.352,0:02:44.988
これはこのグラフィックスパイプラインの外で動くものなんですけども

0:02:45.012,0:02:48.980
汎用的な計算とかそういうものをするためのShaderです

0:02:48.980,0:02:54.489
これはMacでは使えないんですけども、こういうものがあります

0:02:55.090,0:02:57.858
これがいわゆるShaderというもので

0:02:57.882,0:03:05.095
GLSLはこのShaderを記述するための
プログラミング言語の1つということができると思います

0:03:07.400,0:03:14.280
3DCGのライティングであったり画像処理とかエフェクトとか
フィルターとかに使われます

0:03:14.280,0:03:18.350
これで音を作ったりする人もいます

0:03:19.230,0:03:22.885
このGLSLをTouchDesignerで書けるようになると

0:03:22.909,0:03:28.596
若干記述とか違うんですけども
他のソフトウェアやフレームワークで使えるようにもなります

0:03:28.620,0:03:35.760
例えばopenFrameworksだったりProcessing、
WebGLとかでも使うことができます

0:03:36.030,0:03:40.243
他の3Dのソフトウェアで
例えばそれがコードを書かないないものであったとしても

0:03:40.268,0:03:46.670
考え方を適用できるのでとても便利じゃないかなと思います

0:03:46.780,0:03:54.340
行列や線形代数とかの知識があるとより
GLSLの理解が深まりやすいとは思いますけれども

0:03:54.340,0:04:01.780
この今ここでしゃべっているぼく自身元々文系の人で
プログラミングを勉強してからこういったこと勉強を始めた人なので

0:04:01.804,0:04:09.550
このシリーズではとりあえずやってみようというマインドで
進んでいきたいと思います

0:04:09.870,0:04:16.810
それではTouchDesignerでは
どのようにGLSLが使われているかということなんですけども

0:04:16.810,0:04:22.802
TDSWでも講師として何度も登壇していただいている比嘉さんの

0:04:22.826,0:04:29.810
講義のページに良いまとめがあるのでこれを見てみたいと思います

0:04:29.834,0:04:31.162
これですね

0:04:31.186,0:04:40.580
比嘉さんの2019年の講義の初日の
第1回はじめ始めるにあたってという記事です

0:04:41.030,0:04:45.070
下の方に行ってもらうと

0:04:47.849,0:04:55.934
こういう表があっていわゆるTouchDesignerがどのように構成されているか
すごいよく分かりやすくなっている表だと思うんですけども

0:04:57.340,0:05:05.751
このGLSLは基本的に先ほどお話したように
3DCGに使われることが多いんですね

0:05:05.776,0:05:12.574
なのでこのTOP、いわゆる2Dであるとかマテリアルであるとか

0:05:12.598,0:05:19.138
3DのSOP、ここでは頂点の処理が行われます

0:05:19.162,0:05:24.650
ここでGLSLが使われるということになります

0:05:31.120,0:05:36.646
なんでこういうところで
GLSLを使うかと言われると

0:05:36.670,0:05:41.810
いわゆるGPUというものを使って処理をしようということをやっているんですね

0:05:41.810,0:05:49.313
こちらがそのCPUとGPUの違いを表している動画なんですけども

0:05:49.338,0:05:52.149
ちょっと見てみたいと思います

0:05:57.870,0:06:02.893
この動画ですが、GPUを作っている会社がやっているので

0:06:02.917,0:06:05.555
もちろんGPU優位だと思うんですけども

0:06:05.579,0:06:12.180
CPUだったらこう一個一個
処理をしていってこんくらい時間がかかるみたいな動画と

0:06:12.180,0:06:19.449
GPUでこういう処理をすると

0:06:25.399,0:06:32.462
こんな感じで一気に並列処理をして絵が描けるみたいな

0:06:32.486,0:06:34.625
こういう比較動画があります

0:06:37.150,0:06:42.943
全てにおいてGPUが優れているかと言うともちろんそういうわけではなく
こういう単純な作業ほど

0:06:42.967,0:06:50.584
GPUで並列処理でやった方が速いみたいなことがあって
3Dとかの世界でよく使われています

0:06:52.980,0:06:57.330
比嘉さんも書かれていますがとりあえずCPUとGPUというのがあるらしい

0:06:57.330,0:07:04.738
GPUのほうが速いので、できるだけ使って行ったほうがいい
ということで進めていきたいと思います

0:07:14.680,0:07:22.169
TouchDesignerで実際にGLSLを記述する時には

0:07:22.194,0:07:31.066
GLSL TOPとGLSL Multi TOPと

0:07:31.091,0:07:34.110
GLSL MATっていうのがあるんですけれども

0:07:34.110,0:07:37.460
最初の方はしばらくGLSL TOPだけを使って

0:07:37.484,0:07:44.480
Fragment Shaderでできることを色々やっていきたいと思います

0:07:47.100,0:07:54.078
2Dのピクセルを処理していくものなのでこれがエフェクトになったり
アニメーションを作ったりすることができるんですけども

0:07:54.102,0:08:00.376
すごい人たちはこのFragment Shaderの中で
3Dの世界を作ったりもします

0:08:00.401,0:08:04.190
実際にちょっとやってみたいと思います

0:08:04.190,0:08:07.990
まずこれを全部消して

0:08:14.950,0:08:19.230
GLSLを配置します

0:08:19.255,0:08:25.870
こんな感じですね
配置するとこういう風になっていて

0:08:28.169,0:08:32.880
ここを見るとですね
Vertex ShaderとPixel Shaderと書いてあるんですけど

0:08:32.880,0:08:39.180
OpenGLだとFragment Shaderって言うらしいんですが
ここではPixel Shaderという言い方になっています

0:08:39.180,0:08:48.410
調べているとですね Fragment ShaderとPixel Shader
どっちの記述もあると思うんですけど同じものだと思ってください

0:08:48.460,0:08:56.518
このGLSL TOPではPixel Shader、これ以外にも
Compute Shaderというのを書くことができます

0:08:56.542,0:08:58.510
とりあえず後でやるかもしれないんですけども

0:08:58.510,0:09:04.090
今回はPixel Shaderの方を使っていきたいと思います

0:09:08.050,0:09:13.200
中のコードをちょっと見てみたいんですけども

0:09:14.089,0:09:19.687
基本的に全ての処理はこのmain関数の中で行われることになります

0:09:19.711,0:09:26.670
このfragColorというのが
フラグメントの全ての色を出力するものになっています

0:09:26.670,0:09:34.670
こちらのこのvec4 colorっていうのが
vec4型のcolorという変数の名前で

0:09:34.795,0:09:39.710
これはfloatが4つ中に入る仕組みになっています

0:09:39.710,0:09:47.710
こういう書き方もできるんですけど
これは1.0が4つあるのと同じことになります

0:09:47.920,0:09:53.539
短縮形で書いてあると言う感じですね
これは何かというとRGBAになっています

0:09:53.539,0:09:57.901
R, G, B, Aと

0:09:57.925,0:10:02.690
例えばここを0と0にすると

0:10:02.690,0:10:07.120
これがRになると
こういう風になっています

0:10:08.550,0:10:13.339
ここの最後がAなんですけどこれを変えてみても

0:10:13.339,0:10:18.459
この時点でちょっとAが変わってますね

0:10:28.270,0:10:33.597
最後のこのTDOutputSwizzleっていうやつなんですけれども

0:10:33.621,0:10:40.488
ここはですね元々WindowsとMacでの
テクスチャのアルファの情報の保存され方が違うので

0:10:40.512,0:10:44.179
このOSの差異を吸収してくれる関数になります

0:10:44.179,0:10:47.977
なので多分Macを使っている方もいっぱいおられると思うんですけども

0:10:48.002,0:10:53.665
最後に色を出力する際は必ずこれを入れておくようにしておいてください

0:10:54.986,0:11:01.783
頭にTDってついてるやつは基本的に
TouchDesigner固有の関数だと思ってほぼ間違いないと思いますので

0:11:01.808,0:11:04.870
覚えておいてください

0:11:12.620,0:11:18.720
TouchDesignerのこのエディターもいいんですけども
ぼくは外部のエディターを使うようにしてます

0:11:18.745,0:11:22.640
その方が書くのが楽だからということなんですけども

0:11:22.640,0:11:27.490
設定をしていくと、Editを押すと

0:11:27.490,0:11:30.437
外部エディターで開くようになります

0:11:30.462,0:11:38.444
ぼくはVSCodeというのを使っているんですけれども
何でもいいです

0:11:38.468,0:11:43.745
無料で使えるものならSublimte Textとか
そういうのもあると思うんですが

0:11:43.769,0:11:47.390
これの設定の仕方なんですけど

0:11:48.060,0:11:52.878
Edit - Preference
Alt Pでもいいんですけど

0:11:52.902,0:11:57.698
ここからDATsというところに行きます

0:11:57.722,0:12:02.340
ここでテキストエディターのパスを指定するところがあるので

0:12:02.340,0:12:09.410
ぼくはここでVSCodeのパスを指定しています

0:12:09.410,0:12:12.910
これを指定すると

0:12:13.470,0:12:19.859
ここでこうEditを押した時に
外部のテキストエディタで開くようになります

0:12:27.570,0:12:35.852
ここでこう変更したのが即座にこっちでも反映される
という風になっています

0:12:37.649,0:12:45.333
ここにあるのがglsl1_infoといって
ここでステータスを見ることができるのですね

0:12:45.357,0:12:49.058
例えばこのコードに何か異常があった時とかに

0:12:49.082,0:12:55.100
ここでエラーを出してくれるので
どこがおかしいかというのが見ることができます

0:12:55.100,0:13:02.697
例えば今のだったら10行目と11行目が
なんかおかしいぞと言ってくれますので

0:13:02.721,0:13:06.000
デバッグの際に役に立つと思います

0:13:11.240,0:13:16.040
今回は導入なのでこれまでにしたいと思います

0:13:16.064,0:13:21.780
次回から実際に色々コードを書いていきたいと思います

0:13:22.889,0:13:30.529
TDSWではYoutubeチュートリアルの他に
毎月2回程度週末にライブ配信ワークショップを行っています

0:13:30.529,0:13:38.460
これらのチュートリアルでTDSWに興味を持っていただいた方
ぜひライブ配信ワークショップにも遊びに来てください

0:13:38.460,0:13:41.479
またTDSWはPatreonを利用しています

0:13:41.503,0:13:45.900
現在Youtube作成支援プラン、ワークショップ動画見放題プラン

0:13:45.900,0:13:50.088
ワークショップ動画及びライブ配信見放題プランの3つのプランがあります

0:13:50.112,0:13:56.501
こちらは単体でワークショップに参加されるよりお得になっておりますので
ご検討いただければ幸いです

0:13:56.525,0:14:02.040
概要欄にリンクを置いておきますのでぜひチェックしてみてください

0:14:02.040,0:14:09.199
ではご視聴ありがとうございました
よかったらチャンネル登録よろしくお願いいたします