0:00:00.007,0:00:08.906
[音楽]

0:00:11.280,0:00:15.319
みなさんこんにちは
TDSW YouTubeチャンネルです

0:00:15.662,0:00:21.505
TouchDesignerではじめるGLSLの第4回になります
よろしくお願いします

0:00:22.724,0:00:28.513
今回は条件分岐を使ってですね
最終的には今ご覧いただいているような

0:00:28.579,0:00:36.735
4分割されてなおかつそれぞれに違った色と
拡大縮小がかかっているものを作っていきたいと思います

0:00:38.386,0:00:40.824
今回やることなんですが

0:00:40.849,0:00:45.341
まずif statementを使用した条件分岐

0:00:45.610,0:00:50.805
その後にstepとmix関数を使用した条件分岐

0:00:51.420,0:01:00.422
最後にその分岐されたものにそれぞれ色だったり
拡大縮小だったり違った処理をかけていくということをします

0:01:01.086,0:01:04.370
それではやっていきましょう

0:01:12.280,0:01:20.876
これがこれから作業していくGLSL TOPです
デフォルトのものとほぼ変わらないのですが

0:01:23.890,0:01:28.882
このようにテクスチャーを既に読み込んでいる設定になっています

0:01:28.990,0:01:36.966
前回もやったんですがpという値にuvの値を入れています

0:01:36.991,0:01:44.767
ではまずif 文を書いていきたいと思います

0:01:45.066,0:01:47.245
if

0:01:47.270,0:01:53.190
今回はx座標の場所で区切りを付けたいので

0:01:53.215,0:01:54.473
まず

0:01:57.314,0:02:00.100
書いていきます

0:02:01.128,0:02:09.066
xが0.5以下の時にはこういう処理をする
それ以外の時に他の処理をするというコードを書きました

0:02:09.091,0:02:16.114
分岐を作ったら
ここにそれぞれ違う色を入れていきます

0:02:16.180,0:02:22.520
今回はですね
まずvec4 colorを上で宣言しておいて

0:02:36.029,0:02:39.005
このそれぞれのカラーを

0:02:41.609,0:02:46.281
このif文の中に入れていきます

0:02:47.310,0:02:54.849
現在ですねこの0.5より小さい時とそれ以外の時で
同じものが入っているので

0:03:01.187,0:03:10.439
例えばrgbaのところをbgra
こういう風にしてみます

0:03:10.920,0:03:19.375
こうすると-0.5のところを境目に画像の色が変わっていると
こういうものを作れます

0:03:23.838,0:03:33.486
今0.5をその閾値としているんですがこれを小さくすると
閾値が代わって左の方に行きます

0:03:33.511,0:03:36.220
0.2の場所ですね

0:03:36.321,0:03:40.108
これに0.8とかやればこっちの方に来ます

0:03:40.197,0:03:46.230
0.5に戻しておきたいと思います

0:03:47.050,0:03:53.067
これでGLSLで問題なく条件分岐ができるんですけども

0:03:53.091,0:03:56.202
おそらくGLSLについて色々調べていると

0:03:56.227,0:04:02.086
if文というのは処理が遅くなるので
使わないほうがいいっていうのを結構見ると思うんですね

0:04:02.111,0:04:07.476
そういった際にこういう書き方をするといいよ
というのも色々出てくると思うので

0:04:07.560,0:04:11.884
その書き方の1つについてご紹介したいと思います

0:04:14.306,0:04:16.376
これをコピーします

0:04:16.401,0:04:21.989
こっちにまた別のコードを書いていきたいと思います

0:04:32.390,0:04:35.975
こちらのこれから書くコードの都合上ですね

0:04:38.337,0:04:45.915
vec4になっているこのcolorを
vec3にして使いたいと思います

0:04:46.282,0:04:50.672
この辺は1回コメントアウトしておいて

0:04:51.148,0:04:58.177
エラーが出るんで
vec4(color, 1.0)

0:04:58.202,0:05:04.089
アルファを固定しておきたいので
こういう形にさせていただきます

0:05:06.733,0:05:14.085
まずこの今回の条件分岐でやる方法としてはstep関数を使います

0:05:16.070,0:05:22.804
これがOpenGLのクイックリファレンスカードといって
いわゆるチートシートとか呼ばれるやつなんですけども

0:05:22.851,0:05:26.304
後でこのリンクも概要欄に置いておきますので

0:05:26.358,0:05:29.756
ここから使い方を見ることができます

0:05:29.781,0:05:35.335
step関数なのでstepを検索して
この辺にあったんですね

0:05:35.468,0:05:40.093
すごい小さいので大きくしてみようと思うんですけれども

0:05:40.186,0:05:41.389
これですね

0:05:42.440,0:05:48.838
setp関数でedgeというのとx という引数を取ると

0:05:48.863,0:05:57.925
それでxがedgeより小さい時は0を返して
逆の場合には1を返すとこういう使い方ができます

0:05:58.751,0:06:01.555
これでコードを書いてみたいんですけども

0:06:01.580,0:06:07.711
TouchDesignerとこれがいて

0:06:07.736,0:06:14.373
例えばfloat edgeが0.5で

0:06:14.397,0:06:19.078
float xがp.xと

0:06:19.103,0:06:21.935
こうなっている時に

0:06:22.630,0:06:26.450
その結果が

0:06:26.646,0:06:31.915
step(edge, p.x)と

0:06:31.940,0:06:33.940
こんな風になります
例えば

0:06:34.025,0:06:37.982
このresultをちょっとビジュアライズしてみたいと思います

0:06:38.007,0:06:47.910
まずはvec3の中にこのresultを入れると
こういう風になりますね

0:06:49.009,0:06:54.785
これを見ていただくとわかると思うんですけども

0:06:54.810,0:07:01.952
pのxの値が0.5より小さい
つまり左半分は0で

0:07:02.024,0:07:07.899
右半分は1という値が入っているということになります

0:07:08.149,0:07:15.698
これをif文で表現すると左側がfalseで
右側がtrueということになります

0:07:15.723,0:07:20.217
まずはこれが一つ
step関数ですね

0:07:21.200,0:07:25.936
これにmix関数というのも合わせて使います

0:07:26.085,0:07:33.975
またここに来てですね検索するとですね
使い方が書いてあります

0:07:34.000,0:07:39.205
mixでxとyとaという値をとります

0:07:42.085,0:07:47.077
この場合はこのxからはyの値をaによって遷移させると

0:07:47.210,0:07:49.788
いわゆる線形補間というものです

0:07:50.470,0:07:58.329
例えばこのx が0ではyが100
という値が入っていたとします

0:07:58.353,0:08:02.782
aが0から1に動く時に
ここが0から100に動くということになります

0:08:03.649,0:08:08.964
で例えばaに0.5っていう数字を入れたら
50という数字が返ってくると

0:08:09.276,0:08:10.995
こういう風になっています

0:08:13.057,0:08:16.690
ちょっとこのコードを書いてみたいと思います

0:08:19.300,0:08:25.990
mixの0, 1

0:08:26.302,0:08:34.060
さききほどのこの結果ですね
こういうのがあると

0:08:37.964,0:08:44.854
今回やりたいのは
mix 左側に

0:08:47.870,0:08:53.698
こちらのテクスチャを入れます
テクスチャ p

0:08:58.810,0:09:04.911
vec3のrgbカラーの時に

0:09:05.083,0:09:12.335
そのままだとvec4が返ってくるので
rgb これを入れます

0:09:13.148,0:09:21.509
もう一つ今度はgbrとして色を変えたものを
ここに入れます

0:09:23.640,0:09:35.163
0と1をとりあえず入れてたんですけども
左側にrgb右側にgbr というのを入れます

0:09:35.188,0:09:38.875
こうすると
あ、エラーが出てますね

0:09:39.703,0:09:45.814
何がおかしいのかというと
fragColorここですねこの色が出てない

0:09:45.978,0:09:52.230
これはすでにvec3になっているのでこれは要らなくて
こういう風にすると

0:09:52.255,0:09:54.722
あ、またエラーが出ていますね

0:09:58.769,0:10:05.050
ここのこれが無いと
こういうことですね こういう感じになっています

0:10:07.784,0:10:12.075
真ん中で分かれてますね
ちょっと色が違うのはコードがちょっと違うんですね

0:10:12.100,0:10:16.780
bgr
gbrになっているのでbgr

0:10:18.990,0:10:23.560
こうですね
こうすると上と全く同じものができます

0:10:25.099,0:10:32.749
このstep関数は0か1を返すので
0と1がパキッと分かれて返ってくるようになっています

0:10:35.470,0:10:44.422
ここでif文を使った条件分岐と
stepとmix使った条件分岐の比較をしてみたいと思います

0:10:44.628,0:10:53.325
このまだcookされていないので
ちょっとここにabsTimeとか入れてみて

0:10:53.982,0:11:01.054
cookされるように 動いていますね
cookされるようにしていって比較したいと思います

0:11:01.664,0:11:09.273
if 文を使った方がだいたい190
200前後になっていて

0:11:09.445,0:11:12.627
if文を使っていない方こちらが

0:11:14.111,0:11:17.595
110前後というか
このへんですね

0:11:19.100,0:11:28.271
これでこちらのstepとmixを使った方が処理が速いということが
わかったかと思います

0:11:29.224,0:11:35.765
またこのstep関数はですね
程floatを使ったんですけども

0:11:37.030,0:11:41.204
vectorの値も取ることができます
ちょっとやってみたいと思います

0:11:42.470,0:11:47.712
このedgeの方をvec3にして

0:11:49.850,0:11:58.422
例えばですね 0.2, 0.5, 0.6

0:11:58.447,0:12:03.943
とか入れてみて
ここでこの書き方で

0:12:04.146,0:12:09.771
このedgeとxを比較する時はxの方も
vec3にしなきゃいけないと

0:12:09.796,0:12:12.397
同じ型を取るようにします

0:12:12.470,0:12:17.104
ですのでvec3として

0:12:17.128,0:12:22.204
このp.xを入れると
こういう風になります

0:12:22.229,0:12:25.618
ちょっとエラーが出ていますが
ひとまず気にせず

0:12:25.821,0:12:32.579
ここに入れなくていいんですね
入れなくてよくって

0:12:41.520,0:12:44.631
ここがp.xではなくx

0:12:44.656,0:12:47.702
ここですね
こういう風になります

0:12:47.727,0:12:51.546
ちょっと見にくいのでこれを
変えてみたいと思います

0:12:54.889,0:12:58.870
RGB

0:13:00.210,0:13:03.600
ちょっとわかりやすくですね

0:13:03.929,0:13:16.470
0　こちらが0でこちらが1と

0:13:16.524,0:13:20.270
こういう数値を入れます

0:13:21.048,0:13:22.969
こんな感じになるんですね

0:13:23.165,0:13:31.421
左が黒で右が白と
ちょっとこれも変えてみましょう

0:13:31.446,0:13:36.235
BLACKの WHITEとしましょうか

0:13:36.260,0:13:40.871
わかりやすいかなと思います
BLACK WHITE

0:13:41.630,0:13:51.554
この値に応じて
黒から白へと遷移しているという形になります

0:13:51.880,0:14:00.640
先ほどはこの分岐点が1つだけだったんですが
今回は分岐点が3つあるので

0:14:01.273,0:14:03.246
このように分かれています

0:14:03.270,0:14:07.650
実際どのようになっているかというのを
ちょっと書いてみたいと思います

0:14:07.675,0:14:10.763
これは要らないので消して

0:14:10.833,0:14:14.895
まずですねx
このp.x ですね

0:14:15.208,0:14:22.569
xが0.2より小さい場合こちらの場合は

0:14:40.453,0:14:43.710
こういう風になっています

0:14:46.220,0:14:49.863
まず最初にこのvec3(0., 0., 0.)というのが
ここに入るんですね

0:14:49.956,0:14:54.177
x が0.2より小さい場合
これはどういうことかというと

0:14:54.202,0:15:01.766
このp.xの値がこの0.2, 0.5, 0.6と
それぞれ比較されて

0:15:01.860,0:15:07.235
結果p.xの方が小さいので
0が入っていくとこういう形です

0:15:07.274,0:15:08.672
0が入ります

0:15:12.087,0:15:15.010
今度は

0:15:17.689,0:15:25.543
xが0.2より大きくてなおかつ
xが0.5より小さいとこういう値になります

0:15:26.152,0:15:32.722
この場合はp.x が0.2より大きいので
ここに1が入りますね

0:15:32.800,0:15:35.638
こうするとこう赤が表示される
ということになります

0:15:36.838,0:15:45.528
さらに今度は0.5から0.6の間
こことここの間ですね

0:15:45.645,0:15:53.817
この色というのは0.2より大きくて0.5より大きい0.6よりは小さい
ということで

0:15:53.841,0:15:57.499
1, 1, 0と
こういう風になります

0:15:58.230,0:16:05.615
最後に0.6より大きい値の時には

0:16:07.209,0:16:12.373
全てこの0.2より大きくて
0.5より大きくて0.6よりも大きいので

0:16:12.490,0:16:15.420
ここは1と
こういう風になります

0:16:15.445,0:16:20.420
黒、赤、黄、白と
こういうのが出てきますね

0:16:20.445,0:16:26.452
これをこうコメントアウトするとこういう風になると
こういう形です

0:16:26.477,0:16:32.220
この数字を変えると
ちょっとずれていったりしますね

0:16:33.620,0:16:38.919
if文だとこのう4つ分書かなきゃいけなくなるんですね

0:16:39.020,0:16:42.409
なんですがこの場合はこの1行で済むので

0:16:42.910,0:16:48.129
1行というかここのedgeの計算とこの1行だけで済むので

0:16:48.154,0:16:51.951
すごいスッキリするんじゃないかなと思います

0:16:52.019,0:16:55.706
さらに処理も軽いと
メリットがあります

0:16:57.180,0:17:02.807
そういうことなんですけどもちょっと
パッと見とっつきにくいんじゃないかなと思います

0:17:03.127,0:17:08.145
もちろんですねif文が増えてくると
パフォーマンスの差は出てくると思うんですけども

0:17:08.170,0:17:12.176
もしやっててそんなにパフォーマンスに影響がないんであれば

0:17:12.530,0:17:16.859
if文の方がですね
わかりやすいし悪くないんじゃないかなと

0:17:16.884,0:17:19.806
個人的には思っております

0:17:19.900,0:17:24.923
というわけで
今回はですね

0:17:24.948,0:17:30.856
残りはif分の方のサンプルに戻って
続きをやっていきたいと思います

0:17:31.044,0:17:38.468
ですがもちろんこのstepとmixの方でうまくやれる人は
そのままぜひやってみてください

0:17:43.858,0:17:50.870
ではこのif文の書いてある方のGLSLに戻ります

0:17:52.830,0:17:55.715
これですね
こうなってます

0:17:55.740,0:18:01.337
まずわかるのが
現在xの分岐点しかないので

0:18:01.361,0:18:06.850
y座標の分岐点もこれに加えていこうと思います

0:18:08.160,0:18:10.269
やることは

0:18:12.078,0:18:16.485
uniform変数のvec2の

0:18:19.370,0:18:24.955
uThresholdというvec2の変数を入れました

0:18:25.070,0:18:30.947
ここでとりあえずxだけで使ってみたいのですが
こういう風にすると

0:18:30.972,0:18:38.677
xの分岐が作れるんですけども
ここでこれが出ているので

0:18:40.700,0:18:45.406
Load Uniform Namesを押すと入ってくれると
入ってくれましたね

0:18:45.601,0:18:48.844
今回はこの時間は要らないので消して

0:18:48.980,0:18:55.077
0.50.の
vec2だとこの最初の2つを使うんですけども

0:18:55.101,0:19:03.095
このxが0.5として今入っていると
ここの数値を変えればこう動いてくれるわけですね

0:19:05.580,0:19:06.793
動きますね

0:19:06.918,0:19:10.098
とりあえず今0.5にしておきます

0:19:10.902,0:19:16.318
yのほうにも0.5とやると
真ん中基準で分かれるというものが作れます

0:19:16.857,0:19:20.126
1つずつ入れていきたいとおもいます

0:19:20.515,0:19:23.687
ここから分岐を書いていきます

0:19:23.712,0:19:30.837
まずはp.xがuThreshold.xより小さい
つまり0.5より小さい状態

0:19:31.220,0:19:39.374
さらに今度はp.yがuThreshold.yより小さい場合と

0:19:39.399,0:19:42.359
こういうのを入れます

0:19:46.706,0:19:50.200
今度は

0:19:55.730,0:20:03.998
else if として
p.x がuThreshold.x より大きい場合と

0:20:04.091,0:20:08.445
p.x がuThreshold.yより小さい場合
というのを入れます

0:20:11.929,0:20:19.740
さらに今度はxが小さい場合で

0:20:23.032,0:20:26.820
uThreshold.yがこっちですね

0:20:29.280,0:20:38.423
xが0.5以下、uThreshold.xがxより小さい場合と
yがuThreshold.yより大きい場合っていうのが入ります

0:20:39.090,0:20:43.076
これで3つ条件が入って
あとはそれ以外つまり

0:20:43.101,0:20:53.726
p.x がuThreshold.xより大きい時と
p.y がuThreshold.yより大きい時と

0:20:53.751,0:20:57.517
それがこのelseに入ることになります

0:20:59.160,0:21:05.803
ここからこの色をちょっと変えていくと
最初はrgbaでよくって

0:21:05.890,0:21:12.986
何でもいいんですけどもrbgaとか

0:21:13.011,0:21:15.974
ちょっとここでも色が変わって

0:21:15.999,0:21:18.255
もう一個

0:21:22.900,0:21:24.777
gbraとか

0:21:24.870,0:21:26.933
ここと一緒か

0:21:32.917,0:21:34.917
rbga

0:21:38.621,0:21:41.395
色が変わった感じになると思います

0:21:41.551,0:21:44.576
こう4種類パターンがあるわけですね

0:21:47.022,0:21:56.070
もちろんここで値を動かせば
中心が変わっていくというものになります

0:21:56.306,0:22:01.870
これをちょっと動的に動かすようにしたいと思います
一回大きくして

0:22:06.170,0:22:07.991
LFO

0:22:09.400,0:22:11.730
とNoise

0:22:16.060,0:22:18.294
Holdを入れて

0:22:19.295,0:22:24.266
これをPulseにすると

0:22:24.559,0:22:27.913
すると今ですね
1秒おきに

0:22:27.938,0:22:35.534
ここに入っているランダムの値をとってくる
というのができました

0:22:39.411,0:22:43.778
これにMath

0:22:43.803,0:22:47.883
この前に1回
この値名前つけた方がいいですね

0:22:48.071,0:22:52.289
名前をつけて

0:22:52.860,0:22:58.245
threshold[X, Y]
と名前をつけました

0:22:58.385,0:23:01.420
こういう感じですね

0:23:06.518,0:23:13.325
-1から1の値が入ってくるので

0:23:16.160,0:23:23.115
例えば0.2から0.8とか入れてみます

0:23:26.021,0:23:30.070
ここにNullを入れて

0:23:30.095,0:23:35.910
この値をuThresholdに入れていく
ということになります

0:23:37.129,0:23:38.363
こうですね

0:23:38.598,0:23:43.879
これで1秒おきにこの場所が変わっていく
というものができます

0:23:44.051,0:23:46.248
このままだと
ちょっと何なので

0:23:46.359,0:23:54.351
ここにFilter CHOPを入れて
スムーズにアニメーションするようにしてみました

0:24:01.789,0:24:04.531
ちょっとスペースを作りましょうかね
こうです

0:24:09.101,0:24:14.869
ここに前回あった
拡大縮小の機能をつけていこうと思います

0:24:15.134,0:24:22.722
1回ちょっとコードを表示させますが
このpのところに

0:24:26.357,0:24:29.584
uRepeatというのを入れるようにします

0:24:30.420,0:24:37.260
ここでは4つあるのでvec4でやってみましょう

0:24:38.210,0:24:43.390
最初のやつがuRepeat.x

0:24:44.829,0:24:48.440
2個めのこれがuRepeat.y

0:24:52.409,0:25:01.302
3つ目がuRepeat.zで
4つ目がxyzwというのを使っています

0:25:01.560,0:25:06.617
ここでまたwarningが出ているので

0:25:07.796,0:25:12.348
Load Uniform
Namesをするとこれが自動的に入ってくるので

0:25:12.373,0:25:18.250
今度はここに入る数字を
入れていきたいと思います

0:25:18.450,0:25:21.593
同じものを作って今度は

0:25:26.577,0:25:29.680
repeat

0:25:31.309,0:25:37.600
何でもいいんですけどもrepeat[X, Y, Z, W]
というのを入れました

0:25:44.190,0:25:49.012
ここでも-1から

0:25:54.690,0:25:59.919
1から3ぐらいにとりあえずしておきましょうかね
数字を入れました

0:26:00.075,0:26:05.430
てこのNullの参照をまた使いたいんで

0:26:06.559,0:26:12.493
一回ここにMerge CHOPを入れて
これをつなぎます

0:26:13.048,0:26:20.206
そうすると今thresholdのxyとrepeatのxyzwが
入っている形になります

0:26:22.206,0:26:26.927
このrepeatXとか
これを全部ここに持っていくと

0:26:26.952,0:26:34.876
x y z w と

0:26:34.940,0:26:36.298
こういうのができます

0:26:39.678,0:26:45.615
やっぱりちょっとスムーズじゃないので
ここにもフィルターを入れてみたいと思います

0:26:47.580,0:26:51.570
こうすると

0:26:59.662,0:27:05.162
これで一番最初にお見せしたサンプルのようになったと思います

0:27:06.381,0:27:13.594
この境界線のところですね この真ん中の値
例えばマウスアクションとかにしてもいいかもしれないですし

0:27:14.203,0:27:18.018
色んな
要するにCHOPで入ってくれば何でもいいので

0:27:18.096,0:27:20.721
面白く使えるんじゃないかなと思います

0:27:20.980,0:27:23.849
これは今同じ画像全部表示していますが

0:27:23.874,0:27:29.279
ちょっと違った画像バラバラに出したりしても
面白いんじゃないかなと思いました

0:27:33.981,0:27:36.520
表示してみましょう
こんな感じで

0:27:36.599,0:27:40.497
ちょっと最初と色とか違うかもしれませんが
このようになりました

0:27:43.275,0:27:46.604
では今回はここまでとします

0:27:49.929,0:27:57.056
TDSWではYouTubeチュートリアルの他に
毎月2回程度週末にライブ配信ワークショップを行っています

0:27:57.429,0:28:04.173
チュートリアルでTDSWに興味を持っていただいた方
ぜひライブ配信ワークショップにも遊びに来てください

0:28:04.830,0:28:08.255
またTDSWはPatreonを利用しています

0:28:08.280,0:28:10.289
現在チュートリアル作成支援プラン

0:28:10.314,0:28:12.375
ワークショップ動画見放題プラン

0:28:12.421,0:28:17.437
ワークショップ動画およびライブ配信見放題プランの
3つのプランがあります

0:28:17.884,0:28:24.122
単体でワークショップに参加されるよりお得になっておりますので
ご検討いただければ幸いです

0:28:24.370,0:28:28.880
概要欄に各リンクがありますのでぜひチェックしてみてください

0:28:29.420,0:28:34.141
ご視聴ありがとうございました
よかったらチャンネル登録よろしくお願いいたします

0:28:34.211,0:28:35.211
ではまた

0:28:38.578,0:28:51.940
[音楽]