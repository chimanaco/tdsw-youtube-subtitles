0:00:00.015,0:00:08.945
[音楽]

0:00:09.980,0:00:13.966
みなさんこんにちは
TDSW YouTubeチャンネルです

0:00:13.991,0:00:21.235
TouchDesignerではじめるGLSLの第11回になります
よろしくお願いします

0:00:21.259,0:00:26.025
今回はですね
GLSLでのブレンドについてお話しして

0:00:26.050,0:00:31.591
最終的には今ご覧頂いているような
模様を出力していきたいと思います

0:00:31.616,0:00:35.250
今回やることですがまず準備として

0:00:35.250,0:00:41.210
GLSLでBufferを作る
次に加算合成の説明をします

0:00:41.210,0:00:45.202
さらにブレンドをして色々模様を作っていこうと思います

0:00:45.226,0:00:52.202
今回使うのはAddとMultiplyとDifferenceとScreen
この4つをやっていきます

0:00:52.227,0:00:54.351
それではやっていきましょう

0:00:54.376,0:00:58.370
はい今回はこの状態からスタートしていきます

0:00:58.370,0:01:08.700
これはですね第2回の最後にあった
Sine Waveを使ったこういうストライプの画像になります

0:01:10.840,0:01:15.060
サイズを1280x720としています

0:01:15.085,0:01:22.611
1つ重要な点がここでPixel Formatを
16-bit floatとして使っています

0:01:22.636,0:01:28.745
このTOP Toを出した時に
-1から1のSine　waveが出ていればokです

0:01:28.770,0:01:34.241
ここが8-bitになっていると
おそらくこういう風になってしまうんだと思います

0:01:34.266,0:01:38.327
0から1の値しか表示されない
という風になりますので

0:01:38.352,0:01:41.752
16-bitを選ぶようにしてください

0:01:41.777,0:01:46.930
今回はGLSLの中で色を合成していくんですけれども

0:01:46.930,0:01:53.304
合成前の状態を確認したり
合成方法による違いも同時に見ていきたいので

0:01:53.328,0:01:59.780
1つのGLSLから複数の出力ができる
Bufferを今回は使っていきます

0:01:59.804,0:02:04.454
Bufferを出力するにはRenderSelectを使います

0:02:04.479,0:02:11.459
RenderSelectを配置します
こうですね

0:02:11.484,0:02:18.744
このTOPを指定するところにGLSL
これが入ります

0:02:18.769,0:02:20.502
今つながりました

0:02:20.526,0:02:24.478
まず手始めにここにuvを出力してみましょう

0:02:24.503,0:02:38.751
vec4 colorUV = vec4(p, 0.0, 1.0)

0:02:39.821,0:02:43.853
こんな感じですねcolorは

0:02:43.878,0:02:50.746
このBufferに出力するために
location = 0

0:02:50.771,0:02:57.967
out vec4 color_uvとしましょうか

0:02:57.992,0:03:03.200
さらにmain関数の下の方に

0:03:03.200,0:03:09.610
この今宣言したcolor_uvで

0:03:09.635,0:03:17.585
そのuvの指定をしたColovUV

0:03:17.610,0:03:23.600
こうするとひとまずuvが出力されたと思います

0:03:24.840,0:03:30.080
このIndexが0と こうですね
Index0にすると

0:03:30.080,0:03:36.121
ここで指定した0のcolor_uvが

0:03:36.146,0:03:41.520
このcolorUVと出力されると
こういう風になります

0:03:41.545,0:03:49.047
ちょっと今見えなくなってしまったんですけど
さきほどまで出ていたストライプを出力していきます

0:03:49.547,0:03:56.140
でもう1つRenderSelectを置きます
で今度はIndexは1としておきます

0:03:56.330,0:04:01.285
ここでまたwarningが出ていて見れないので
ここを修正していきたいと思います

0:04:01.310,0:04:07.005
今度はここに2番目としてlocation = 1を置いて

0:04:07.030,0:04:13.212
color_1

0:04:13.237,0:04:23.606
さらにcolor_1イコール
colorと

0:04:23.631,0:04:25.225
こういう風に入れます

0:04:25.250,0:04:31.922
今度はここのですね# of Color Buffersというところに
今1という風になっているので

0:04:31.947,0:04:35.770
ここを2にするともう一個出力されるようになります

0:04:35.770,0:04:40.453
デフォルトは1で大抵fragColorを使ってここに出ているんですけども

0:04:40.478,0:04:45.195
2を選択すると
1つ以上のRenderSelectに出力できるようになります

0:04:45.219,0:04:48.565
これで2つまでまず
Bufferを出力できるようになりました

0:04:48.590,0:04:55.540
今こう縦の線があるんですけども
今度は横線を追加していきたいと思います

0:04:56.130,0:05:01.940
color これを名前を変えていきます
color1、color2と

0:05:01.965,0:05:04.990
ここがcolor1

0:05:06.902,0:05:11.340
これは使わなくてもいいのでコメントアウト

0:05:11.920,0:05:16.617
1ですね

0:05:16.642,0:05:22.691
color1が縦線でcolor2を作ってそれを横線にしたいと思います

0:05:22.716,0:05:28.969
uvを前に持っていきましょう
こうで color1

0:05:28.969,0:05:35.492
今度はcolor2 こちらをcolor2で

0:05:35.517,0:05:41.790
yという風にします
また出力したいので

0:05:41.815,0:05:46.301
location = 2
ここにもう1つ

0:05:49.239,0:05:54.403
こういう風になりますね
もう1つRenderSelectを追加します

0:05:54.428,0:06:03.461
今度はIndexを2とします
ここを今度は3にすると横の線が入ってきました

0:06:04.506,0:06:09.008
次にこれらを足した結果を出力していきます

0:06:09.033,0:06:16.640
今回このfragColor別になくてもいいので消してしまいましょう
消します

0:06:16.665,0:06:20.590
1回コードを綺麗にすると

0:06:21.071,0:06:26.009
で次のlocation = 3として

0:06:26.009,0:06:33.072
color_add

0:06:33.097,0:06:36.470
ここでもcolor_add

0:06:39.716,0:06:44.085
宣言してなかったですね

0:06:44.110,0:06:50.361
colorAddが入って

0:06:50.463,0:06:55.852
このAddは単純に

0:06:55.877,0:07:01.969
color1.rgbと
color2.rgb と

0:07:01.969,0:07:08.463
もう1つRenderSelectを追加して
3 こちらを4

0:07:08.488,0:07:11.860
こうするんですね

0:07:14.925,0:07:21.400
こうするとなぜか
こういうちょっと面白い形が見えてきました

0:07:23.540,0:07:32.120
この縦線と横線を足した結果がなんでこうなるんだろうというのは
僕なんかも最初にすごい不思議に思ったんですけども

0:07:32.120,0:07:35.481
何でこうなるかちょっと説明していきたいと思います

0:07:35.506,0:07:45.180
まずですねこのサインカーブというのは
さきほども出していたんですけどもTOP Toで見ると

0:07:45.180,0:07:48.990
gとbとaを消しましょう

0:07:48.990,0:07:54.920
こういう形になってますね
-1から1への変化という風になります

0:07:54.945,0:07:59.498
なんですがこの黒のところにはですね

0:07:59.523,0:08:07.063
0以下の数字が入ってるんですね
この辺から行くと0から-1に行って0という風になっています

0:08:07.088,0:08:14.065
だから黒のエリアの方が多いんですね
同じ黒でも中に入っている値が違う ことになります

0:08:14.090,0:08:17.970
こちらの場合は

0:08:20.566,0:08:27.810
これ今x方向のこういう値を取ってるんですけど
常に一定の値になってますね

0:08:29.160,0:08:33.670
これをMath CHOPでこの2つを足してみます

0:08:35.790,0:08:48.060
Combine CHOPsでAddする
こういう風になりますね

0:08:48.060,0:08:53.073
この今見ているとこは完全に0なので
このへんなんですね

0:08:53.097,0:08:58.110
何も影響を受けないので
全く同じ数字が入ってるんですけども

0:08:58.110,0:09:03.779
この位置をちょっと変えてみます
0.5が真ん中にもなっているので

0:09:03.779,0:09:08.089
これとこれをまず連動させたいと思います

0:09:11.708,0:09:16.560
こうかな
こうですね これで

0:09:17.458,0:09:23.290
これを動かすとちょっと値が変わっていくのがわかると思いますが

0:09:23.314,0:09:25.250
例えばですねこの

0:09:28.821,0:09:33.729
このあたり、この辺だと0.7あたりですね

0:09:33.754,0:09:39.599
この辺は真っ白で
1に近い数字が入っているんですけども

0:09:39.624,0:09:43.560
0.7の辺りを見てみましょう

0:09:47.366,0:09:50.240
このくらいですね

0:09:50.240,0:09:56.196
ここを見たときにほとんどが0から1の間に入ってて

0:09:56.221,0:10:01.910
この黒のあたり
黒になるエリアがほぼないんですね

0:10:02.135,0:10:08.871
これがこのaddした時にいう
この辺なんですね0.7

0:10:08.896,0:10:14.935
この辺のことを言うわけです
白のエリアがこう多くて黒のエリアはここだけ

0:10:14.960,0:10:22.649
0.7 白がここと こういう風になってます
これがこのサイクルですね

0:10:22.649,0:10:30.378
例えばこの辺がどういう値かというとvが0.3あたりですね

0:10:30.403,0:10:37.080
0.3あたりというのはこうなっていて

0:10:37.300,0:10:43.370
ほぼ全部0より下にあるという風になってますので
ここも真っ暗となっていますね

0:10:43.370,0:10:48.430
ここに例え白があったとしてもこの黒の値の方が大きくて

0:10:48.430,0:10:55.630
黒のマイナスの値の方が大きいので結果は黒になってしまうと
こういう風になります

0:10:59.059,0:11:06.553
これとここからこのaddから出したTOP To

0:11:12.251,0:11:13.433
これは

0:11:19.456,0:11:26.833
0.324一緒なので
これとこれが全く同じものになるわけですね

0:11:32.848,0:11:36.389
これがいわゆる加算合成というやつになります

0:11:43.990,0:11:49.740
次はMultiply掛け算を出力していきたいと思います

0:12:00.209,0:12:02.959
Mutiply

0:12:13.794,0:12:24.842
Mutiplyなので単純にこれはかけてるんですね
color1.rgb * color2.rgbとなります

0:12:28.963,0:12:30.972
こんな感じですね

0:12:30.996,0:12:37.049
もう1個新しく作って
今度はこれはIndexは4

0:12:37.073,0:12:41.943
こちらは
GLSLのここを5にすると

0:12:41.967,0:12:47.880
こうすると
今度は掛け算をするとこういう風になるんですね

0:12:48.994,0:12:54.040
また違った模様が現れてきました
これもですね加算と一緒で

0:12:54.065,0:13:01.220
こうやって計算をした結果こういう
パターンが生まれてくるということになります

0:13:01.245,0:13:07.519
次はDifferenceを出してみたいと思います

0:13:19.122,0:13:24.007
これは絶対値ですね

0:13:24.032,0:13:31.737
color1からcolor2を引いた数の絶対値を取るというやつです

0:13:42.521,0:13:45.904
Differenceの

0:13:53.430,0:13:59.110
こうですねこれでもう一個

0:14:05.565,0:14:11.395
これを6にするとまた違ったパターンが出てきました
面白いですね

0:14:11.420,0:14:16.435
これも同様に
この加算と同じように計算して出すことができます

0:14:16.459,0:14:20.780
もう気づきの方もおられると思うんですけどもこれらの

0:14:20.780,0:14:26.220
AddとかMutiplyとかDifferenceっていうのは

0:14:26.220,0:14:34.120
TouchDesignerのComposite TOPで全部再現できるんですね
これと同じことをやっていると

0:14:34.519,0:14:37.900
この1と2を持っていって

0:14:37.900,0:14:43.390
これが最初のデフォルトなのでMultiplyですよね
これが入ってきて

0:14:43.390,0:14:53.220
これがAddだったらこれになって
これがDifferenceだったらこれが出てくるという風になってますね

0:14:53.790,0:15:00.860
このComposite TOPは全GLSLで再現できるということができます

0:15:02.920,0:15:08.891
僕の場合なんかですねPhotoshopとかで
何となくこんな感じの出力がされるんだろうなぁと思って

0:15:08.916,0:15:11.810
ブレンドモードとか使ってましたけど

0:15:11.810,0:15:20.360
こうやって改めて数値で理解できるとすごい面白いなぁと
勉強している時に思った記憶があります

0:15:20.360,0:15:28.831
今までの3つはすごい単純なものだったんですけども
実装のアルゴリズムがぱっと思いつかない物ってけっこうあると思うんですね

0:15:29.034,0:15:33.970
例えば今からスクリーンモードを実装したいんですけども

0:15:33.970,0:15:38.785
どんなことになっているんだろうと思ってですね
こうやってAdobeのページに行くと

0:15:38.810,0:15:47.609
スクリーンの項については各チャンネル内のcolor情報に基づき
合成色と基本色を反転したカラーを乗算しますと

0:15:47.634,0:15:49.081
こういう風になっていますね

0:15:49.120,0:15:53.949
これをGLSLで書くと
ちょっと書いていきます

0:15:53.974,0:16:08.599
vec3 blendScreen(vec3 base, vec3 blend)

0:16:08.623,0:16:25.204
vec3 color = base * (1 - blend) + blend

0:16:25.228,0:16:28.160
return color

0:16:28.185,0:16:31.396
こうです何かカミスってますね

0:16:31.420,0:16:34.630
これで関数が書けました

0:16:34.655,0:16:41.868
で今度も
これを新しく出力したいので

0:16:41.892,0:16:45.504
color_screen

0:17:05.622,0:17:11.372
color_screenがあって
color_screenをここで使っていきます

0:17:11.397,0:17:19.209
blendScreen(color1.rgb, color2.rgb)

0:17:24.232,0:17:27.635
こういう形になりますね

0:17:27.659,0:17:37.196
今度はこのscreenも出力したいので
出していきます

0:17:37.221,0:17:45.010
Screenでやるとこれまた別のパターンが
こうやって現れてくることになります

0:17:49.210,0:17:51.648
画像を入力してみたいと思います

0:17:51.673,0:17:57.644
Movie File Inでこう

0:17:57.669,0:18:03.913
ここではcolor1に入れましょうか

0:18:03.938,0:18:08.135
texture(sTD2DInputs[0], vUV.st)

0:18:08.160,0:18:11.690
バナナが入りましたね

0:18:14.154,0:18:21.480
ここで4つを比較すると

0:18:27.443,0:18:34.234
せっかくなのでですねちょっとこれに動きをつけていきます
2個目に動きをつけていきましょうか

0:18:34.259,0:18:40.110
2個目なのでこれにuTimeとかつけると

0:18:40.110,0:18:44.090
存在しないのでエラーがでます

0:18:51.783,0:18:53.353
こうですね

0:18:53.378,0:18:58.468
まだこの変数を持っていないので入ってもらって

0:18:58.492,0:19:03.596
absTime.frame/10とか

0:19:13.521,0:19:20.333
こんな感じで写真と一緒にやってもこういう違いが出てきて
面白いんじゃないかと思います

0:19:20.357,0:19:24.702
またパターンに戻しましょう

0:19:24.726,0:19:26.390
こうですね

0:19:26.390,0:19:30.839
別々のパターンがこうやって生まれてくるのがわかると思います

0:19:30.863,0:19:34.616
これで4種類の異なるパターンを作ることができたので

0:19:34.640,0:19:40.050
最初にお見せしたものとだいたい
同じものができたんじゃないかなと思います

0:19:40.075,0:19:45.874
この値を色々変えたりして
お気に入りのパターンを生成してみてください

0:19:45.899,0:19:47.788
今回ちょっと趣向を変えまして

0:19:47.812,0:19:52.010
ここからちょっと僕のフリースタイルで
どんなパターンが作れるのか

0:19:52.010,0:19:54.596
いろいろコードを書いていってみたいと思います

0:19:54.620,0:19:59.365
この先コードの解説はありません

0:24:00.620,0:24:02.903
こんな感じですね

0:24:02.927,0:24:08.555
色々いじってみると
何か面白いおもしろいパターンが生まれてくることもあると思いますので

0:24:08.579,0:24:10.851
皆さんもいろいろやってみてください

0:24:10.875,0:24:14.050
今回はここまでになります

0:24:14.050,0:24:19.818
TDSWでは毎月2回程度
週末にライブ配信ワークショップを行っています

0:24:19.842,0:24:24.950
チケットはPeatixやEventbriteからお求めいただけます

0:24:24.950,0:24:30.270
またPatreonも利用しています
現在こちらの3つのプランがあります

0:24:30.295,0:24:35.318
これらのリンクは動画の概要欄にありますので
よかったらチェックしてみてください

0:24:36.390,0:24:38.703
それではご視聴ありがとうございました

0:24:38.728,0:24:43.271
気に入っていただけたらグッドボタンと
チャンネル登録よろしくお願いいたします

0:24:43.920,0:24:45.542
ではまた

0:24:45.800,0:24:59.269
[音楽]